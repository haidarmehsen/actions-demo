# This workflow releases the app to github releases section in the repository

on:
  workflow_dispatch:
  # Uncomment the following lines to enable automatic builds on push to the dev branch
  push:
    branches:
      - main
name: "Test, Build & Release Android"

jobs:
  build:
    permissions: write-all
    name: Build & Release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      # Get version and build number from pubspec.yaml
      - name: Get version name and build number
        id: get_version_name_and_code
        run: |
          version=$(grep -E '^version:' pubspec.yaml | awk -F '+' '{print $1}' | awk '{print $2}')
          version_code=$(grep -E '^version:' pubspec.yaml | awk -F '+' '{print $2}')
          echo "version_name=$version" >> $GITHUB_OUTPUT
          echo "version_code=$version_code" >> $GITHUB_OUTPUT

      # Simulate Building release artifacts for dev server
      - name: Create release artifacts for dev server
        id: create_release_artifacts_for_dev_server
        run: |
          mkdir -p build/app/outputs/flutter-apk
          mkdir -p build/app/outputs/bundle/release
          touch build/app/outputs/flutter-apk/app-release.apk
          touch build/app/outputs/bundle/release/app-release.aab
          
          # Rename and move the artifacts to a folder called artifacts in the root of the project:
          
          # first set version_name and version_code as variables to shorten the command
          version_name=${{ steps.get_version_name_and_code.outputs.version_name }}
          version_code=${{ steps.get_version_name_and_code.outputs.version_code }}
          
          # Create the artifacts folder and copy the artifacts to it
          mkdir -p artifacts
          cp build/app/outputs/flutter-apk/app-release.apk artifacts/app-dev-v$version_name-build-$version_code.apk
          cp build/app/outputs/bundle/release/app-release.aab artifacts/app-dev-v$version_name-build-$version_code.aab

          echo "contents of artifacts folder:"
          ls -l artifacts

      - name: Upload all the artifacts in the artifacts folder
        uses: actions/upload-artifact@v4.3.1
        with:
          name: app-release
          path: |
            artifacts/*

      - name: Set github release version name
        id: set_github_release_version_name
        run: |
          # first set version_name and version_code as variables to shorten the command
          version_name=${{ steps.get_version_name_and_code.outputs.version_name }}
          version_code=${{ steps.get_version_name_and_code.outputs.version_code }}
          
          echo "github_release_version_name=$version_name+build.$version_code" >> $GITHUB_OUTPUT

      - name: Push to Releases
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: "artifacts/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.set_github_release_version_name.outputs.github_release_version_name }}
          removeArtifacts: true
          replacesArtifacts: true
          allowUpdates: true
          makeLatest: true